/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sajid
 */
public class IssueBook extends javax.swing.JFrame {

    /**
     * Creates new form login
     */
    public IssueBook() {
        initComponents();
         connect();
         Book_load();
           book();
         }
    
    
     private class BookItem
     {
       private final int id ;
       private final String name;
       BookItem(int id,String name)
       {
           this.id= id;
           this.name=name;
       }
       @Override
       public String toString(){
         return name;
       }
    }
   
   
   
    
 private  Connection con=null;
 private  PreparedStatement pst=null;
 private  ResultSet rs=null;
  
  
  private void connect()
  {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","1234");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
  
  
    private void book()
  {
        try {
             pst = con. prepareStatement("select * from  bookTable");
             rs= pst.executeQuery();
            
              bookItem.removeAllItems();
            while(rs.next())
            {
                bookItem.addItem(new BookItem(rs.getInt(1),rs.getString(2)) );
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
           }
     
  }
  

    
   private void Book_load()
    {
        try {
            pst = con. prepareStatement("select m.id,  m.name, b.name,ib.issueDate,ib.returnDate from"
                    + " issuebook as ib join member as m"
                    + " on ib.memId= m.id join booktable as b on b.id= ib.bookId");
             
             rs= pst.executeQuery();
             ResultSetMetaData rsmd=rs.getMetaData(); 
             int col=rsmd.getColumnCount();
            DefaultTableModel dtm= (DefaultTableModel) BookTable.getModel();
            dtm.setRowCount(0);
            
            while(rs.next())
            {
               Vector v =new Vector();
                
                for(int i=0;i<col;i++)
                  {
                     v.add(rs.getString("m.id"));
                     v.add(rs.getString("m.name"));
                     v.add(rs.getString("b.name"));
                     v.add(rs.getString("ib.issueDate"));
                     v.add(rs.getString("ib.returnDate"));
                      
                  }
                dtm.addRow(v);
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  }

  
  
  
    /**      * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BookTable = new javax.swing.JTable();
        memId = new javax.swing.JTextField();
        Addbutton = new javax.swing.JButton();
        Deletebutton = new javax.swing.JButton();
        Cancelbutton = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bookItem = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        memName = new javax.swing.JTextField();
        issueDate = new com.toedter.calendar.JDateChooser();
        returnDate = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 0));
        jLabel1.setText("Membr Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText(" Member Id");

        BookTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        BookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name", "Book", "Issue Date", "Return Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        BookTable.setGridColor(new java.awt.Color(0, 255, 102));
        BookTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                BookTableAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        BookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BookTable);

        memId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memIdActionPerformed(evt);
            }
        });
        memId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                memIdKeyReleased(evt);
            }
        });

        Addbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Addbutton.setText("Add");
        Addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbuttonActionPerformed(evt);
            }
        });

        Deletebutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Deletebutton.setText("Delete");
        Deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebuttonActionPerformed(evt);
            }
        });

        Cancelbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Cancelbutton.setText("Cancel");
        Cancelbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelbuttonActionPerformed(evt);
            }
        });

        Update.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("Issue Book");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 204, 0));
        jLabel5.setText("Book");

        bookItem.setEditable(true);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 204, 0));
        jLabel6.setText("Issue Date");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 204, 0));
        jLabel8.setText("Return Date");

        issueDate.setMaximumSize(new java.awt.Dimension(214748, 214748));
        issueDate.setMinimumSize(new java.awt.Dimension(15, 15));

        returnDate.setMaximumSize(new java.awt.Dimension(214748, 214748));
        returnDate.setMinimumSize(new java.awt.Dimension(15, 15));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Deletebutton)
                            .addComponent(Addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Update))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(Cancelbutton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2))
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(memName)
                            .addComponent(bookItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(memId)
                            .addComponent(issueDate, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(returnDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(393, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(340, 340, 340))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(memId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(memName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(bookItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(issueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(returnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Cancelbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Deletebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DeletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebuttonActionPerformed
        // TODO add your handling code here:
          try {
            
               String mid =   memId.getText();
               String mName =   memName.getText();
       
                int bIdx = bookItem.getSelectedIndex();
                
                DefaultTableModel dtm= (DefaultTableModel) BookTable.getModel();   
                   int rowIdx = BookTable.getSelectedRow();
           
               if(!mid.equals("") && rowIdx >= 0 && !mName.equals("") && bIdx>=0)
                 {   
                   BookItem  bItem =   (BookItem) bookItem.getSelectedItem();
                   SimpleDateFormat sdf= new SimpleDateFormat(" YYYY-MM-dd ");
                    String issue_date=   sdf.format(issueDate.getDate());
                    String return_date=  sdf.format(returnDate.getDate());
                   String colFirst = (String) dtm.getValueAt(rowIdx, 0);
                 pst= con.prepareStatement("delete from  issuebook  where memId=?");
                 pst.setString(1,colFirst);
            
                  int k = pst.executeUpdate();
                
                if(k>0)
                {
                     Book_load();
                     JOptionPane.showMessageDialog(this," record  with member id  " + colFirst+ "deleted!");
                     this.memId.setText("");
                     this.bookItem.setSelectedIndex(-1);
                     this.memName.setText("");
                     Addbutton.setEnabled(true);
                     this.memId.requestFocus();
                    
                      }
                   else{
                      JOptionPane.showMessageDialog(this,"Error!");
                     }
                
                  } 
        
                else{
                    JOptionPane.showMessageDialog(this,"one or more field are blank!");
                }
                
            
        } catch (SQLException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
         catch (NumberFormatException ex) {
           JOptionPane.showMessageDialog(this,"please enter Number  ");
        }
          
    }//GEN-LAST:event_DeletebuttonActionPerformed

    private void AddbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbuttonActionPerformed
      
        try {
            
               String mid =   memId.getText();
               String mName =   memName.getText();
       
                int bIdx = bookItem.getSelectedIndex();
                
             if(!mid.equals("")  && !mName.equals("") && bIdx>=0)
                {   
                   BookItem  bItem =   (BookItem) bookItem.getSelectedItem();
                   SimpleDateFormat sdf= new SimpleDateFormat(" YYYY-MM-dd ");
                    String issue_date=   sdf.format(issueDate.getDate());
                    String return_date=  sdf.format(returnDate.getDate());
                
                 pst= con.prepareStatement("insert into issuebook(memId,bookId,issueDate,returnDate)values(?,?,?,?)");
                 pst.setString(1,mid);
                 pst.setInt(2, bItem.id);
                 pst.setString(3, issue_date);
                 pst.setString(4, return_date);
                  
                int k = pst.executeUpdate();
                
                if(k>0)
                {
                     Book_load();
                     JOptionPane.showMessageDialog(this," Book Issued!");
                     this.memId.setText("");
                     this.bookItem.setSelectedIndex(-1);
                     this.memName.setText("");
                     this.memId.requestFocus();
                    
                }
                else{
                    JOptionPane.showMessageDialog(this,"Error!");
                   }
                
               } 
        
                else{
                    JOptionPane.showMessageDialog(this,"one or more field are blank!");
                }
                
            
        } catch (SQLException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
         catch (NumberFormatException ex) {
           JOptionPane.showMessageDialog(this,"please enter Number  ");
        }
                         
    }//GEN-LAST:event_AddbuttonActionPerformed

    
    private void BookTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_BookTableAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_BookTableAncestorAdded

    private void BookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookTableMouseClicked
        try {
            // TODO add your handling code here:
            DefaultTableModel dtm= (DefaultTableModel) BookTable.getModel();
            int rowIdx = BookTable.getSelectedRow();
            String colFirst = (String) dtm.getValueAt(rowIdx, 0);
            String colSecond = (String) dtm.getValueAt(rowIdx, 1);
            String colThird = (String) dtm.getValueAt(rowIdx, 2);
            
            Date colFourth = new SimpleDateFormat("YYYY-MM-dd").parse((String) dtm.getValueAt(rowIdx, 3));
            Date colFifth= new SimpleDateFormat("YYYY-MM-dd").parse((String) dtm.getValueAt(rowIdx, 4));
            
         
            memId.setText(colFirst);
            memName.setText(colSecond);
            bookItem.setSelectedItem(colThird);
            
            issueDate.setDate(colFourth);
            returnDate.setDate(colFifth);
          Addbutton.setEnabled(false);
        } catch (ParseException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
          
          
          

    }//GEN-LAST:event_BookTableMouseClicked

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
             // TODO add your handling code here:
             
            try {
            
               String mid =   memId.getText();
               String mName =   memName.getText();
       
                int bIdx = bookItem.getSelectedIndex();
                
                DefaultTableModel dtm= (DefaultTableModel) BookTable.getModel();   
                   int rowIdx = BookTable.getSelectedRow();
           
               if(!mid.equals("") && rowIdx >= 0 && !mName.equals("") && bIdx>=0)
                 {   
                   BookItem  bItem =   (BookItem) bookItem.getSelectedItem();
                   SimpleDateFormat sdf= new SimpleDateFormat(" YYYY-MM-dd ");
                    String issue_date=   sdf.format(issueDate.getDate());
                    String return_date=  sdf.format(returnDate.getDate());
                   String colFirst = (String) dtm.getValueAt(rowIdx, 0);
                 pst= con.prepareStatement("update  issuebook set bookId=?,issueDate=?,returnDate=? where memId=?");
           
                 pst.setInt(1, bItem.id);
                 pst.setString(2, issue_date);
                 pst.setString(3, return_date);
                  pst.setString(4,colFirst );
                  
                  int k = pst.executeUpdate();
                
                if(k>0)
                {
                     Book_load();
                     JOptionPane.showMessageDialog(this," updated!");
                     this.memId.setText("");
                     this.bookItem.setSelectedIndex(-1);
                     this.memName.setText("");
                     this.memId.requestFocus();
                      Addbutton.setEnabled(true);
                    
                      }
                   else{
                      JOptionPane.showMessageDialog(this,"Error!");
                     }
                
                  } 
        
                else{
                    JOptionPane.showMessageDialog(this,"one or more field are blank!");
                }
                
            
        } catch (SQLException ex) {
            Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
        }
         catch (NumberFormatException ex) {
           JOptionPane.showMessageDialog(this,"please enter Number  ");
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void CancelbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelbuttonActionPerformed
        // TODO add your handling code here:
         this.setVisible(false);
         (new Main()).setVisible(true);
    }//GEN-LAST:event_CancelbuttonActionPerformed

    private void memIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memIdKeyPressed
        // TODO add your handling code here:i
         if(evt.getKeyCode()== KeyEvent.VK_ENTER)
         {
                 try {
                String mid= memId.getText();
                pst= con.prepareStatement("select * from member where id=?");
                pst.setString(1, mid);
                rs= pst.executeQuery();
                if(rs.next())
                {
                    String mName= rs.getString("name");
                    memName.setText(mName.trim());
                            
                }
                else
                {
                  JOptionPane.showMessageDialog(this, "Member Id not found!");
                }
                
             
            } catch (SQLException ex) {
                Logger.getLogger(IssueBook.class.getName()).log(Level.SEVERE, null, ex);
            }
        
         }
        
        
    }//GEN-LAST:event_memIdKeyPressed

    private void memIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memIdKeyReleased
        // TODO add your handling code here:
                   
        
    }//GEN-LAST:event_memIdKeyReleased

    private void memIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IssueBook().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addbutton;
    private javax.swing.JTable BookTable;
    private javax.swing.JButton Cancelbutton;
    private javax.swing.JButton Deletebutton;
    private javax.swing.JButton Update;
    private javax.swing.JComboBox bookItem;
    private com.toedter.calendar.JDateChooser issueDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField memId;
    private javax.swing.JTextField memName;
    private com.toedter.calendar.JDateChooser returnDate;
    // End of variables declaration//GEN-END:variables
}
